// Generated by CoffeeScript 1.8.0
(function() {
  var is_alphanum, is_lowercase, is_numeric, is_uppercase, matching, subsequence_match,
    __slice = [].slice;

  subsequence_match = function(text, term) {};

  matching = function(candidate, term, hit_tag) {
    var ai, cacy, cap, char, cumulation, end_tag, hit, hits, i, ie, last_split, original_char, score, splitted_text, start_tag, tagend, tagstart, termi, text, texti, ucterm, uctext, _i, _len;
    text = candidate.text;
    cacy = candidate.acronym;
    uctext = text.toUpperCase();
    ucterm = term.toUpperCase();
    score = 1;
    hits = [];
    ai = 0;
    texti = -1;
    termi = 0;
    while (termi < ucterm.length) {
      char = ucterm.charCodeAt(termi);
      if (char === uctext.charCodeAt(cacy[ai])) {
        texti = cacy[ai];
        ai += 1;
        score += term.charCodeAt(termi) === text.charCodeAt(cacy[ai]) ? 41 : 30;
      } else {
        texti = uctext.indexOf(ucterm[termi], texti + 1);
        while (texti > cacy[ai]) {
          ai += 1;
          if (ai >= cacy.length) {
            ai = -1;
            break;
          }
        }
        if (texti === -1) {
          return null;
        }
      }
      hits.push(texti);
      termi += 1;
    }
    if (hits.length !== term.length) {
      return null;
    }
    for (_i = 0, _len = hits.length; _i < _len; _i++) {
      hit = hits[_i];
      original_char = text.charCodeAt(hit);
    }
    if (text.length > 4) {
      score += 20;
    }
    i = 0;
    splitted_text = [];
    last_split = 0;
    while (i < hits.length) {
      ie = i;
      while (true) {
        ie += 1;
        if (ie >= hits.length || hits[ie] !== hits[ie - 1] + 1) {
          break;
        }
      }
      score += (ie - i - 1) * 7;
      tagstart = hits[i];
      tagend = hits[ie - 1] + 1;
      splitted_text.push(text.slice(last_split, tagstart));
      last_split = tagstart;
      splitted_text.push(text.slice(last_split, tagend));
      last_split = tagend;
      i = ie;
    }
    cap = text.slice(last_split, text.length);
    i = 0;
    cumulation = '';
    start_tag = '<span class="' + hit_tag + '">';
    end_tag = '</span>';
    while (i < splitted_text.length) {
      cumulation += splitted_text[i] + start_tag + splitted_text[i + 1] + end_tag;
      i += 2;
    }
    return {
      score: score,
      matched: cumulation + cap
    };
  };

  is_lowercase = function(charcode) {
    return charcode >= 97 && charcode <= 122;
  };

  is_uppercase = function(charcode) {
    return charcode >= 65 && charcode <= 90;
  };

  is_numeric = function(charcode) {
    return charcode >= 48 && charcode <= 57;
  };

  is_alphanum = function(charcode) {
    return (is_lowercase(charcode)) || (is_uppercase(charcode)) || (is_numeric(charcode));
  };

  this.MatchSet = (function() {
    function MatchSet() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (args.length === 1) {
        this.take_set(args[0]);
      }
    }

    MatchSet.prototype.take_set = function(term_array) {
      var ar, charcode, i, j, text, _i, _ref, _results;
      this.set = new Array(term_array.length);
      _results = [];
      for (i = _i = 0, _ref = term_array.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        text = term_array[i][0];
        _results.push(this.set[i] = {
          text: text,
          key: term_array[i][1],
          acronym: ((function() {
            var _j, _ref1;
            ar = [];
            if (text.length > 0) {
              for (j = _j = 0, _ref1 = text.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
                charcode = text.charCodeAt(j);
                if ((is_uppercase(charcode)) || is_alphanum(charcode) && (j === 0 || !is_alphanum(text.charCodeAt(j - 1)))) {
                  ar.push(j);
                }
              }
            }
            return ar;
          })())
        });
      }
      return _results;
    };

    MatchSet.prototype.seek = function(search_term, nresults, hit_tag) {
      var c, ci, insertat, minscore, retar, sr, _i, _j, _ref, _ref1;
      if (nresults == null) {
        nresults = 10;
      }
      if (hit_tag == null) {
        hit_tag = 'subsequence_matching';
      }
      if (this.set.length === 0 || nresults === 0) {
        return [];
      }
      retar = [];
      minscore = 0;
      for (ci = _i = 0, _ref = this.set.length; 0 <= _ref ? _i < _ref : _i > _ref; ci = 0 <= _ref ? ++_i : --_i) {
        c = this.set[ci];
        sr = matching(c, search_term, hit_tag);
        if (sr && (sr.score > minscore || retar.length < nresults)) {
          insertat = 0;
          for (insertat = _j = 0, _ref1 = retar.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; insertat = 0 <= _ref1 ? ++_j : --_j) {
            if (retar[insertat].score < sr.score) {
              break;
            }
          }
          sr.key = c.key;
          sr.text = c.text;
          retar.splice(insertat, 0, sr);
          if (retar.length > nresults) {
            retar.pop();
          }
          minscore = retar[retar.length - 1].score;
        }
      }
      return retar;
    };

    MatchSet.prototype.seek_best_key = function(term) {
      var res;
      res = this.seek(term, 1);
      if (res.length > 0) {
        return res[0].key;
      } else {
        return null;
      }
    };

    return MatchSet;

  })();

  this.matchset = function(args) {
    return new this.MatchSet(args);
  };

  this.matchset_from_strings = function(strar) {
    return new this.MatchSet(strar.map(function(st, i) {
      return [st, i];
    }));
  };

}).call(this);

//# sourceMappingURL=CleverMatches.js.map
